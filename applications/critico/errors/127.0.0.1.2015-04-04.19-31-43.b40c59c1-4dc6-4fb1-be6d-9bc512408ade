(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: <Row {'number_': 1L, 'product_ref': 4L, 'name': 'Edition Name', 'display_picture_name': '', 'users_rated': None, 'display_picture_blob': None, 'date_of_release': datetime.date(2015, 4, 4), 'users_rating': None, 'id': 16L, 'description': 'Description of Edition'}>"
p3
sS'layer'
p4
S'/home/dhruv/web2py/applications/critico/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\nINDEX_PAGE=\'index\'\nPRODUCT_INDEX_PAGE=\'product_index\'\nPRODUCT_PROFILE_PAGE=\'product_profile\'\nEDITION_MANAGER_PAGE=\'edition_manager\'\nEDITION_PROFILE_PAGE=\'edition_profile\'\nSUB_EDITION_PROFILE_PAGE=\'sub_edition_profile\'\nCONTRIBUTOR_MANAGER_PAGE=\'contributor_manager\'\nCONTRIBUTOR_PROFILE_PAGE=\'contributor_profile\'\n\nimport urllib2\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if not session.auth:\n        return userIndex()\n    print auth.user_id\n    userId = auth.user_id\n    userType = getAuthUserType(userId)\n    if userType == \'a\':\n        return userIndex()\n    elif userType == \'b\':\n        return productIndex()\n\ndef userIndex():\n    form = SQLFORM.factory(Field(\'product_name\', requires=[IS_NOT_EMPTY()]), submit_button=\'Search\')\n    if form.accepts(request, session):\n        redirect(URL((\'product_index/\'+form.vars.product_name)))\n    return dict(message=\'Hi user\', form=form)\n\ndef product_index():\n    print urllib2.unquote(request.args(0))\n    if isProductWithThisNameExists(urllib2.unquote(request.args(0))):\n        return getProductPage(getProductIdOf(urllib2.unquote(request.args(0))))\n    else:\n        return dict(message=\'Product not found!\', form=FORM())\n\ndef getProductPage(prodId):\n    return dict(product_info=getAuthBasedProductProfile(prodId), edition_info=getAuthBasedAllEditonForm(prodId), form=getAuthBasedReviewForm(\'product\', prodId))\n\n\ndef productIndex():\n    rows = db(db.product.admin_ref == auth.user_id).select()\n    if rows:\n        redirect(URL(urllib2.quote((\'product_index/\'+str(rows[0].name)))))\n\n    form = SQLFORM.factory(submit_button=\'Update Product Profile\')\n    if form.accepts(request, session):\n        prodId = getProductIdOrNewProductId()\n        redirect(URL((\'product_index/\'+str(auth.user_id))))\n    return dict(message=\'Hi Product Admin\', form=form)\n\ndef product_profile():\n    prodId = getProductWithThisAdminId()\n    return dict(form=getEditableProductProfile(prodId))\n\ndef edition_manager():\n    prodId = getProductWithThisAdminId()\n    return dict(form=getEditableEditionManager(prodId))\n\ndef edition_profile():\n    edId = request.vars.ed\n    prodId = int(request.vars.prod)\n\n    if edId == \'\':\n        edId = -1\n    else:\n        edId = int(edId)\n        if prodId != getEditionProductId(edId):\n            return\n    return dict(edition_info=getAuthBasedEditionForm(edId, prodId), sub_edition_info=getAuthBasedAllSubEditonForm(edId), form=getAuthBasedReviewForm(\'edition\', edId))\n\ndef sub_edition_profile():\n    edId = int(request.vars.ed)\n    subEdId = request.vars.subed\n\n    if subEdId == \'\':\n        subEdId = -1\n    else:\n        subEdId = int(subEdId)\n        if edId != getSubEditionEditionId(subEdId):\n            return\n    return dict(sub_edition_info=getAuthBasedSubEditionForm(subEdId, edId), form=getAuthBasedReviewForm(\'sub_edition\', subEdId))\n\ndef contributor_manager():\n    prodId = getProductIdOrNewProductId()\n    return dict(form=getContributorManager(prodId))\n\ndef contributor_profile():\n    contribId = request.vars.contrib\n    prodId = getProductIdOrNewProductId()\n    if contribId == \'\':\n        contribId = -1\n    else:\n        contribId = int(contribId)\n        if prodId != getContributorProductId(contribId):\n            return\n    return dict(form=getContributorProfile(contribId, prodId))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/register_user\n    http://..../[app]/default/user/register_product_admin\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args(0) == \'register\':\n        return dict(form=getRegistrationOptionForm())\n    elif request.args(0) == \'register_user\':\n        return dict(form=getUserRegistrationForm())\n    elif request.args(0) == \'register_product_admin\':\n        return dict(form=getProductAdminRegistrationForm())\n    elif request.args(0) == \'profile\':\n        return dict(form=getProfileForm())\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\n\'\'\'\nUser Functions\nStart\n\'\'\'\n\ndef selectAuthUser(userId):\n    return db(db.auth_user.id == userId).select()\n\ndef getAuthUserFirstName(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].first_name\n\ndef getAuthUserLastName(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].last_name\n\ndef getAuthUserUserName(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].username\n\ndef getAuthUserPicBlob(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].display_picture_blob\n\ndef getAuthUserPicName(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].display_picture_name\n\ndef getAuthUserEMail(userId):\n    rows = selectAuthUser(userId)\n    if rows:\n        return rows[0].email\n\ndef updateAuthUserUserType(userId, userType):\n    db(db.auth_user.id == userId).update(user_type = userType)\n\ndef makeAuthUSerUser(userId):\n    updateAuthUserUserType(userId, \'a\')\n\ndef makeAuthUSerSoapAdmin(userId):\n    updateAuthUserUserType(userId, \'b\')\n\ndef approveAuthUser(userId):\n    db(db.auth_user.id == userId).update(registration_key=\'\')\n\ndef getUserRegistrationForm():\n    form = getRegistrationForm()\n    if form.accepts(request, session):\n        makeAuthUSerUser(form.vars.id)\n        approveAuthUser(form.vars.id)\n    return form\n\ndef getProductAdminRegistrationForm():\n    form = getRegistrationForm()\n    if form.accepts(request, session):\n        makeAuthUSerSoapAdmin(form.vars.id)\n        approveAuthUser(form.vars.id)   ## ------------------- This line will be removed in production\n    return form\n\ndef disalbeAuthFieldReadOrWrite(fieldList):\n    for field in fieldList:\n        db.auth_user[field].readable = db.auth_user[field].writable = False\n\ndef getRegistrationForm():\n    disalbeAuthFieldReadOrWrite([\'gender\', \'date_of_birth\', \'country\', \'state_\', \'city\', \'display_picture_name\', \'display_picture_blob\'])\n    return auth.register()\n\ndef getRegistrationOptionForm():\n    form = SQLFORM.factory(submit_button=\'Users, Click here!\')\n    form.add_button(\'Product Admin, Click Here!\', URL(\'user/register_product_admin\'))\n    if form.accepts(request, session):\n        redirect(URL(\'user/register_user\'))\n    return form\n\n@auth.requires_login()\ndef getProfileForm():\n    disalbeAuthFieldReadOrWrite([\'username\'])\n    return auth.profile()\n\ndef getAuthUserType(userId):\n    return db(db.auth_user.id == userId).select()[0].user_type\n\n\'\'\'\nUser Functions\nEnd\n\'\'\'\n\n\'\'\'\nProduct Functions\nStart\n\'\'\'\ndef insertProduct(prodName, picName, picBlob):\n    return db.product.insert(name=prodName, display_picture_name=picName, display_picture_blob=picBlob)\n\ndef initProduct():\n    return db.product.insert()\n\ndef selectProduct(prodId):\n    return db(db.product.id == prodId).select()\n\ndef isProductWithThisIdExists(prodId):\n    if not selectProduct(prodId):\n        return False\n    else:\n        return True\n\ndef isThisIsTheProductAdmin(prodId, userId):\n    rows = selectProduct(prodId)\n    if rows:\n        if rows[0].admin_ref == userId:\n            return True\n    return False\n\ndef getProductIdOf(prodName):\n    if isProductWithThisNameExists(prodName):\n        return db(db.product.name == prodName).select()[0].id\n    else:\n        return -1\n\ndef isProductWithThisNameExists(prodName):\n    if not db(db.product.name == prodName).select():\n        return False\n    else:\n        return True\n\ndef getProductName(prodId):\n    rows = selectProduct(prodId)\n    if rows:\n        return rows[0].name\n\ndef updateProductName(prodId, name_):\n    rows = selectProduct(prodId)\n    if rows:\n        db(db.product.id == prodId).update(name=name_)\n\ndef getProductPicName(prodId):\n    rows = selectProduct(prodId)\n    if rows:\n        return rows[0].display_picture_name\n\ndef updateProductPicName(prodId, picName):\n    rows = selectProduct(prodId)\n    if rows:\n        db(db.product.id == prodId).update(display_picture_name=picName)\n\ndef getProductPicBlob(prodId):\n    rows = selectProduct(prodId)\n    if rows:\n        return rows[0].display_picture_blob\n\ndef updateProductPicBlob(prodId, picBlob):\n    rows = selectProduct(prodId)\n    if rows:\n        db(db.product.id == prodId).update(display_picture_blob=picBlob)\n\n\ndef updateProductPic(prodId, picName, picBlob):\n    db(db.product.id == prodId).update(display_picture_name=picName, display_picture_blob=picBlob)\n\ndef getProductIdOrNewProductId():\n    val = getProductWithThisAdminId()\n    if val == -1:\n        return initProduct()\n    else:\n        return val\n\ndef getProductWithThisAdminId():\n    rows = db(db.product.admin_ref == auth.user_id).select()\n    if(not rows):\n        return -1\n    else:\n        return rows[0].id\n\ndef getEditableProductProfile(prodId):\n    update = db.product(prodId)\n    form = SQLFORM(db.product, update, submit_button=\'Apply Changes\', showid=False, upload=URL(r=request,f=\'download\'))\n    form[0].insert(-1,getNetRatingOfProductAsTR(prodId))\n    if form.accepts(request, session):\n        redirect(URL(PRODUCT_PROFILE_PAGE))\n    return form\n\n\ndef getNetRatingOfProductAsTR(prodId):\n    return TR(TD(LABEL(\'Net Rating\'), _class="w2p_fl"), TD(XML(\'<i>\'+str(getProductRating(prodId))+\'</i>\'), _class="w2p_fw"))\n\ndef ratingProcessing(form):\n    if (not session.auth) or auth.user.user_type==\'b\':\n       form.errors.your_rating = \'Only registered users are allowed to rate\'\n\ndef getNonEditableProductProfile(prodId):\n    update = db.product(prodId)\n    form = SQLFORM(db.product, update, buttons=[], showid=False , readonly=True, upload=URL(r=request,f=\'download\'))\n    \n    form[0].insert(-1,getNetRatingOfProductAsTR(prodId))\n    rateForm = SQLFORM.factory(Field(\'your_rating\', requires=[IS_INT_IN_RANGE(1,10)], default=getProductRatingByThisUser(prodId)))\n    if rateForm.accepts(request, session, onvalidation=ratingProcessing):\n        insertProductRating(prodId, rateForm.vars.your_rating)\n        redirect(URL(args=request.args, vars=request.get_vars, host=True))\n    form.append(rateForm)\n\n    return form\n\ndef getAuthBasedProductProfile(prodId):\n    if isThisIsTheProductAdmin(prodId, auth.user_id):\n        return getEditableProductProfile(prodId)\n    else:\n        return getNonEditableProductProfile(prodId)\n\ndef getProductUsersRated(prodId):\n    rows = selectProduct(prodId)\n    if rows:\n        return rows[0].users_rated\n\ndef updateProductUsersRatedList(prodId, usersRatedList):\n    rows = selectProduct(prodId)\n    if rows:\n        db(db.product.id == prodId).update(users_rated=usersRatedList)\n\n\ndef getProductUsersRating(prodId):\n    rows = selectProduct(prodId)\n    if rows:\n        return rows[0].users_rating\n\ndef updateProductUsersRatingList(prodId, usersRatingList):\n    rows = selectProduct(prodId)\n    if rows:\n        db(db.product.id == prodId).update(users_rating=usersRatingList)\n\ndef insertProductRating(prodId, score):\n    usersRatedList = getProductUsersRated(prodId)\n    usersRatingList = getProductUsersRating(prodId)\n    if not usersRatedList:\n        usersRatedList=[auth.user_id]\n        usersRatingList=[score]\n        updateProductUsersRatedList(prodId, usersRatedList)\n        updateProductUsersRatingList(prodId, usersRatingList)\n\n    if auth.user_id in usersRatedList:\n        ind = usersRatedList.index(auth.user_id)\n        usersRatingList[ind] = score\n        updateProductUsersRatingList(prodId, usersRatingList)\n    else:\n        usersRatedList.append(auth.user_id)\n        usersRatingList.append(score)\n        updateProductUsersRatedList(prodId, usersRatedList)\n        updateProductUsersRatingList(prodId, usersRatingList)\n\ndef getProductRating(prodId):\n    usersRatingList = getProductUsersRating(prodId)\n    if not usersRatingList:\n        return 0\n    return (1.0*sum(usersRatingList))/len(usersRatingList)\n\ndef getProductRatingByThisUser(prodId):\n    usersRatedList = getProductUsersRated(prodId)\n    score = 0\n    if (not session.auth) or (not usersRatedList):\n        return 0\n    if auth.user_id in usersRatedList:\n        usersRatingList = getProductUsersRating(prodId)\n        ind = usersRatedList.index(auth.user_id)\n        score = usersRatingList[ind]\n    return score\n\n\'\'\'\nProduct Functions\nEnd\n\'\'\'\n\n\'\'\'\nEdition Functions\nStart\n\'\'\'\n\ndef insertEdition(prodId, name_, number_, dor, desc, picName, picBlob):\n    return db.edition.insert(product_ref=prodId, name=name_, number=number_, date_of_release=dor, description=desc, display_picture_name=picName, display_picture_blob=picBlob)\n\ndef initEdition(prodId):\n    return db.edition.insert(product_ref=prodId)\n\ndef isEditionWithThisIdExists(edId):\n    if not db(db.edition.id == edId).select():\n        return False\n    else:\n        return True\n\ndef selectEdition(edId):\n    return db(db.edition.id == edId).select()\n\ndef isThisTheEditionAdmin(edId, userId):\n    prodId = getProductWithThisAdminId()\n    rows = selectEdition(edId)\n    if rows:\n        if rows[0].product_ref == prodId:\n            return True\n    return False\n\ndef getEditionProductId(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].product_ref\n\ndef updateEditionProductId(edId, prodId):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(product_ref=prodId)\n\ndef getEditionName(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].name\n\ndef updateEditionName(edId, name_):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(name=name_)\n\ndef getEditionNumber(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].number_\n\ndef updateEditionNumber(edId, num):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(number_=num)\n\ndef getEditionDOR(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].date_of_release\n\ndef updateEditionDOR(edId, dor):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(date_of_release=dor)\n\ndef getEditionDesc(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].description\n\ndef updateEditionDesc(edId, desc):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(description=desc)\n\ndef getEditionPicName(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].display_picture_name\n\ndef updateEditionPicName(edId, name_):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(display_picture_name=name_)\n\ndef getEditionPicBlob(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].display_picture_blob\n\ndef updateEditionPicBlob(edId, picBlob):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(display_picture_blob=blob)\n\n## Returns listof  editions if exists else -1\ndef getEditionsWithThisProductId(prodId):\n    rows = db(db.edition.product_ref == prodId).select()\n    if(not rows):\n        return -1\n    else:\n        return rows\n\ndef getEditableEditionManager(prodId):\n    form = SQLFORM.factory(submit_button=\'Add Edition\')\n    form.add_button(\'Back\', URL(INDEX_PAGE))\n    rows = db(db.edition.product_ref == prodId).select()\n    for row in rows:\n        str_=(\'Edit Edition #\' + str(row.number_))\n        form.add_button(str_, URL(EDITION_PROFILE_PAGE, vars=dict(ed=str(row.id))))\n    if form.accepts(request, session):\n        redirect(URL(EDITION_PROFILE_PAGE, vars=dict(ed=\'\')))\n    return form\n\ndef getAuthBasedEditionForm(edId, prodId):\n    if isThisIsTheProductAdmin(prodId, auth.user_id):\n        return getEditableEditionForm(edId, prodId)\n    else:\n        return getNonEditableEditionForm(edId, prodId)\n    \'\'\'  ## for sub editions\n    rows = db(db.sub_edition.edition_ref == edId).select()\n    for row in rows:\n        str_=(\'Edit Sub Edition #\' + str(row.number_))\n        form.add_button(str_, URL(SUB_EDITION_PROFILE_PAGE, vars=dict(ed=str(edId), subed=str(row.id))))\n    if isEditionWithThisIdExists(edId):\n        form.add_button(\'Add sub edition\', URL(SUB_EDITION_PROFILE_PAGE, vars=dict(ed=str(edId), subed=\'\')))\n    ## -----\n    \'\'\'\n\ndef getNetRatingOfEditionAsTR(edId):\n    return TR(TD(LABEL(\'Net Rating\'), _class="w2p_fl"), TD(XML(\'<i>\'+str(getEditionRating(edId))+\'</i>\'), _class="w2p_fw"))\n\ndef editionRatingProcessing(form):\n    if (not session.auth) or auth.user.user_type==\'b\':\n       form.errors.your_rating = \'Only registered users are allowed to rate\'\n\ndef getNonEditableEditionProfile(edId, prodId):\n    update = db.edition(edId)\n    form = SQLFORM(db.edition, update, showid=False, readonly=True, buttons=[], upload=URL(r=request,f=\'download\'))\n    return form\n\ndef getNonEditableEditionManager(prodId):\n    allEditions = getEditionsWithThisProductId(prodId)\n    allEditonForms = []\n    for ed in allEditions:\n        allEditonForms.append(getNonEditableEditionProfile(ed.id, prodId))\n    return allEditonForms\n\n\n\ndef getLinkToEditionPageAsTR(edId, prodId):\n    return TR(TD(LABEL(\'URL\'), _class="w2p_fl"), TD(A(XML(\'url\'), _href=URL(EDITION_PROFILE_PAGE,  vars=dict(ed=str(edId), prod=str(prodId)))), _class="w2p_fw"))\n\ndef getEditableEditionForm(edId, prodId):\n    update = db.edition(edId)\n    submitBtnStr = \'Apply Changes\'\n    if not update:\n        db.edition.product_ref.default = prodId\n        submitBtnStr = \'Submit\'\n    form = SQLFORM(db.edition, update, deletable=True, showid=False, submit_button=submitBtnStr, upload=URL(r=request,f=\'download\'))\n\n    form[0].insert(-1,getLinkToEditionPageAsTR(edId, prodId))\n    form[0].insert(-1,getNetRatingOfEditionAsTR(prodId))\n    if form.accepts(request, session):\n        response.flash="Submitted"\n    return form\n\ndef getButtonToAddEditon(prodId):\n    addForm = getEditableEditionForm(-1, prodId)\n    form = SQLFORM.factory(submit_button=\'Add Edition!\')\n    if form.accepts(request, session):\n        return addForm\n    return form\n\ndef getNonEditableEditionForm(edId, prodId):\n    update = db.edition(edId)\n    form = SQLFORM.factory(db.edition, update, submit_button=\'Submit Rating\', showid=False, readonly=True, upload=URL(r=request,f=\'download\'))\n    form[0].insert(-1,getLinkToEditionPageAsTR(edId, prodId))\n\n    form[0].insert(-1,getNetRatingOfEditionAsTR(edId))\n    rateForm = SQLFORM.factory(Field(\'your_rating\', requires=[IS_INT_IN_RANGE(1,10)], default=getEditionRatingByThisUser(prodId)))\n    if rateForm.accepts(request, session, onvalidation=editionRatingProcessing):\n        insertEditionRating(edId, rateForm.vars.your_rating)\n        redirect(URL(args=request.args, vars=request.get_vars, host=True))\n    form.append(rateForm)\n\n    return form\n\ndef getAllEditonForms(prodId):\n    rows = getEditionsWithThisProductId(prodId)\n    if rows == -1:\n        return []\n    formList = []\n    check = isThisIsTheProductAdmin(prodId, auth.user_id)\n    for row in rows:\n        if check:\n            formList.append(getEditableEditionForm(row.id, prodId))\n        else:\n            formList.append(getNonEditableEditionForm(row.id, prodId))\n    return formList\n\ndef getAuthBasedButtonToAddEdition(prodId):\n    if not isThisIsTheProductAdmin(prodId, auth.user_id):\n        return SQLFORM.factory(buttons=[])\n    else:\n        return getButtonToAddEditon(prodId)\n\ndef getAuthBasedAllEditonForm(prodId):\n    form = getAuthBasedButtonToAddEdition(prodId)\n    allForms = getAllEditonForms(prodId)\n    allForms.append(form)\n    return allForms\n\ndef getEditionUsersRated(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].users_rated\n\ndef updateEditionUsersRatedList(edId, usersRatedList):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(users_rated=usersRatedList)\n\ndef getEditionUsersRating(edId):\n    rows = selectEdition(edId)\n    if rows:\n        return rows[0].users_rating\n\ndef updateEditionUsersRatingList(edId, usersRatingList):\n    rows = selectEdition(edId)\n    if rows:\n        db(db.edition.id == edId).update(users_rating=usersRatingList)\n\ndef insertEditionRating(edId, score):\n    usersRatedList = getEditionUsersRated(edId)\n    usersRatingList = getEditionUsersRating(edId)\n    if not usersRatedList:\n        usersRatedList=[auth.user_id]\n        usersRatingList=[score]\n        updateEditionUsersRatedList(edId, usersRatedList)\n        updateEditionUsersRatingList(edId, usersRatingList)\n\n    if auth.user_id in usersRatedList:\n        ind = usersRatedList.index(auth.user_id)\n        usersRatingList[ind] = score\n        updateEditionUsersRatingList(edId, usersRatingList)\n    else:\n        usersRatedList.append(auth.user_id)\n        usersRatingList.append(score)\n        updateEditionUsersRatedList(edId, usersRatedList)\n        updateEditionUsersRatingList(edId, usersRatingList)\n\ndef getEditionRating(edId):\n    usersRatingList = getEditionUsersRating(edId)\n    if not usersRatingList:\n        return 0\n    return (1.0*sum(usersRatingList))/len(usersRatingList)\n\ndef getEditionRatingByThisUser(prodId):\n    usersRatedList = getEditionUsersRated(prodId)\n    score = 0\n    if (not session.auth) or (not usersRatedList):\n        return 0\n    if auth.user_id in usersRatedList:\n        usersRatingList = getEditionUsersRating(prodId)\n        ind = usersRatedList.index(auth.user_id)\n        score = usersRatingList[ind]\n    return score\n\n\n\'\'\'\nEdition Functions\nEnd\n\'\'\'\n\n\'\'\'\nSub Edition Functions\nStart\n\'\'\'\ndef insertSubEdition(prodId, edId, name_, number_, dor, desc, picName, picBlob):\n    return db.sub_edition.insert(product_ref=prodId, edition_ref=edId, name=name_, number=number_, date_of_release=dor, description=desc, display_picture_name=picName, display_picture_blob=picBlob)\n\ndef initSubEdition(prodId, edId):\n    return db.sub_edition.insert(product_ref=prodId, edition_ref=edId)\n\ndef isSubEditionWithThisIdExists(subEdId):\n    if not db(db.sub_edition.id == subEdId).select():\n        return False\n    else:\n        return True\n\ndef selectSubEdition(subEdId):\n    return db(db.sub_edition.id == subEdId).select()\n\ndef getSubEditionEditionId(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].edition_ref\n\ndef updateSubEditionEditionId(subEdId, edId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(edition_ref=edId)\n\ndef getSubEditionProductId(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].product_ref\n\ndef updateSubEditionProductId(subEdId, prodId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(product_ref=prodId)\n\ndef getSubEditionName(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].name\n\ndef updateSubEditionName(subEdId, name_):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(name=name_)\n\ndef getSubEditionNumber(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].number_\n\ndef updateSubEditionNumber(subEdId, num):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(number_=num)\n\ndef getSubEditionDOR(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].date_of_release\n\ndef updateSubEditionDOR(subEdId, dor):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(date_of_release=dor)\n\ndef getSubEditionDesc(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].description\n\ndef updateSubEditionDesc(subEdId, desc):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(description=desc)\n\ndef getSubEditionPicName(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].display_picture_name\n\ndef updateSubEditionPicName(subEdId, name_):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(display_picture_name=name_)\n\ndef getSubEditionPicBlob(subEdId):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        return rows[0].display_picture_blob\n\ndef updateSubEditionPicBlob(subEdId, picBlob):\n    rows = selectSubEdition(subEdId)\n    if rows:\n        db(db.sub_edition.id == subEdId).update(display_picture_blob=blob)\n\n## Returns list of sub editions if exists else -1\ndef getSubEditionsWithThisEditionId(edId):\n    rows = db(db.sub_edition.edition_ref == edId).select()\n    if(not rows):\n        return -1\n    else:\n        return rows\n\ndef getSubEditionProfile(contribId, edId, prodId):\n    update = db.contributor(contribId)\n    if not update:\n        db.sub_edition.product_ref.default = prodId\n        db.sub_edition.edition_ref.default = edId\n\n    form = SQLFORM(db.sub_edition, update, deletable=True, showid=False, submit_button=\'Apply Changes\', upload=URL(r=request,f=\'download\'))\n    \n    form.add_button(\'Back\', URL(EDITION_PROFILE_PAGE,  vars=dict(ed=str(edId))))\n\n    ## for videos\n    \'\'\'\n    rows = db(db.sub_edition.product_ref == edId).select()\n    for row in rows:\n        str_=(\'Edit Sub Edition #\' + str(row.number_))\n        form.add_button(str_, URL(SUB_EDITION_PROFILE_PAGE, vars=dict(ed=str(edId), subed=str(row.id))))\n    if isEditionWithThisIdExists(edId):\n        form.add_button(\'Add sub edition\', URL(SUB_EDITION_PROFILE_PAGE, vars=dict(ed=str(edId), subed=\'\')))\n    \'\'\'\n    ## -----\n    if form.accepts(request, session):\n        if form.deleted:\n            redirect(URL(EDITION_PROFILE_PAGE, vars=dict(ed=str(edId))))\n        else:\n            redirect(URL(SUB_EDITION_PROFILE_PAGE,  vars=dict(subed=str(form.vars.id),ed=str(edId))))\n    return form\n\n\ndef getLinkToSubEditionPageAsTR(subEdId, edId):\n    return TR(TD(LABEL(\'URL\'), _class="w2p_fl"), TD(A(XML(\'url\'), _href=URL(SUB_EDITION_PROFILE_PAGE, vars=dict(subed=str(subEdId), ed=str(edId))), _class="w2p_fw")))\n\ndef getEditableSubEditionForm(subEdId, edId):\n    update = db.sub_edition(subEdId)\n    submitBtnStr = \'Apply Changes\'\n    if not update:\n        db.sub_edition.edition_ref.default = edId\n        submitBtnStr = \'Submit\'\n    form = SQLFORM(db.sub_edition, update, deletable=True, showid=False, submit_button=submitBtnStr, upload=URL(r=request,f=\'download\'))\n\n    form[0].insert(-1,getLinkToSubEditionPageAsTR(subEdId, edId))\n\n    if form.accepts(request, session):\n        response.flash="Submitted"\n    return form\n\ndef getButtonToAddSubEditon(edId):\n    addForm = getEditableSubEditionForm(-1, edId)\n    form = SQLFORM.factory(submit_button=\'Add Sub-Edition!\')\n    if form.accepts(request, session):\n        return addForm\n    return form\n\ndef getNonEditableSubEditionForm(subEdId, edId):\n    update = db.sub_edition(subEdId)\n    form = SQLFORM(db.sub_edition, update, buttons=[], showid=False, readonly=True, upload=URL(r=request,f=\'download\'))\n    form[0].insert(-1,getLinkToSubEditionPageAsTR(subEdId, edId))\n    return form\n\ndef getAllSubEditonForms(edId):\n    rows = getSubEditionsWithThisEditionId(edId)\n    if rows == -1:\n        return []\n    formList = []\n    check = isThisTheEditionAdmin(edId, auth.user_id)\n    for row in rows:\n        if check:\n            formList.append(getEditableSubEditionForm(row.id, edId))\n        else:\n            formList.append(getNonEditableSubEditionForm(row.id, edId))\n    return formList\n\ndef getAuthBasedButtonToAddSubEdition(edId):\n    if not isThisTheEditionAdmin(edId, auth.user_id):\n        return SQLFORM.factory(buttons=[])\n    else:\n        return getButtonToAddSubEditon(edId)\n\ndef getAuthBasedAllSubEditonForm(prodId):\n    form = getAuthBasedButtonToAddSubEdition(prodId)\n    allForms = getAllSubEditonForms(prodId)\n    allForms.append(form)\n    return allForms\n\ndef getAuthBasedSubEditionForm(subEdId, edId):\n    if isThisTheEditionAdmin(edId, auth.user_id):\n        return getEditableSubEditionForm(subEdId, edId)\n    else:\n        return getNonEditableSubEditionForm(subEdId, edId)\n\n\'\'\'\nSub Edition Functions\nEnd\n\'\'\'\n\n\'\'\'\nContributor Functions\nStart\n\'\'\'\ndef insertContributor(prodId, name_1, name_2, role_, url_, picName, picBlob):\n    return db.contributor.insert(product_ref=prodId, real_name=name_1, character_name=name_2, role=role_, url=url_, display_picture_name=picName, display_picture_blob=picBlob)\n\ndef initContributor(prodId):\n    return db.contributor.insert(product_ref=prodId)\n\ndef isContributorWithThisIdExists(contribId):\n    if not db(db.contributor.id == contribId).select():\n        return False\n    else:\n        return True\n\ndef selectContributor(contribId):\n    return db(db.contributor.id == contribId).select()\n\ndef getContributorProductId(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].product_ref\n\ndef updateContributorProductId(contribId, prodId):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(product_ref=prodId)\n\ndef getContributorRealName(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].real_name\n\ndef updateContributorRealName(contribId, name_):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(real_name=name_)\n\ndef getContributorCharacterName(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].character_name\n\ndef updateContributorCharacterName(contribId, name_):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(character_name=name_)\n\ndef getContributorRole(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].role\n\ndef updateContributorRole(contribId, role_):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(role=role_)\n\n\ndef getContributorURL(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].url\n\ndef updateContributorURL(contribId, url_):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(url=url_)\n\ndef getContributorPicName(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].display_picture_name\n\ndef updateContributorPicName(contribId, name_):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(display_picture_name=name_)\n\ndef getContributorPicBlob(contribId):\n    rows = selectContributor(contribId)\n    if rows:\n        return rows[0].display_picture_blob\n\ndef updateContributorPicBlob(contribId, picBlob):\n    rows = selectContributor(contribId)\n    if rows:\n        db(db.contributor.id == contribId).update(display_picture_blob=blob)\n\n## Returns list of sub editions if exists else -1\ndef getContributorsWithThisProductId(contribId):\n    rows = db(db.contributor.edition_ref == contribId).select()\n    if(not rows):\n        return -1\n    else:\n        return rows\n\ndef getContributorManager(prodId):\n    form = SQLFORM.factory(submit_button=\'Add Contributor\')\n    \n    form.add_button(\'Back\', URL(INDEX_PAGE))\n    rows = db(db.contributor.product_ref == prodId).select()\n    \n    for row in rows:\n        str_=(\'Edit Contributor Profile: \' + str(row.real_name))\n        form.add_button(str_, URL(CONTRIBUTOR_PROFILE_PAGE, vars=dict(contrib=str(row.id))))\n    \n    if form.accepts(request, session):\n        redirect(URL(CONTRIBUTOR_PROFILE_PAGE, vars=dict(contrib=\'\')))\n    return form\n\ndef getContributorProfile(contribId, prodId):\n    update = db.contributor(contribId)\n    if not update:\n        db.contributor.product_ref.default = prodId\n    \n    form = SQLFORM(db.contributor, update, deletable=True, showid=False, submit_button=\'Apply Changes\', upload=URL(r=request,f=\'download\'))\n    \n    form.add_button(\'Back\', URL(CONTRIBUTOR_MANAGER_PAGE))\n    \n    if form.accepts(request, session):\n        if form.deleted:\n            redirect(URL(CONTRIBUTOR_MANAGER_PAGE))\n        else:\n            redirect(URL(CONTRIBUTOR_PROFILE_PAGE,  vars=dict(contrib=str(form.vars.id))))\n    return form\n\n\n\n\'\'\'\nContributor Functions\nEnd\n\'\'\'\n\n\'\'\'\nReview Functions\nStart\n\'\'\'\ndef insertReview(type_, prodId, edId, subEdId, revId, title_, desc):\n    db.review.insert(for_type=type_, product_ref=prodId, edition_ref=edId, sub_edition_ref=subEdId, review_ref=revId, title=title_, description=desc)\n\ndef initReview(type_, typeId):\n    if type_ == \'product\':\n        return db.review.insert(for_type=type_, product_ref=typeId)\n    elif type_ == \'edition\':\n        return db.review.insert(for_type=type_, edition_ref=typeId)\n    elif type_ == \'sub_edition\':\n        return db.review.insert(for_type=type_, sub_edition_ref=typeId)\n    elif type_ == \'reply\':\n        return db.review.insert(for_type=type_, review_ref=typeId)\n    return -1\n\n\ndef selectReview(revId):\n    return db(db.review.id == revId).select()\n\ndef isReviewWrittenByThisUser(revId):\n    rows = selectReview(revId)\n    if rows:\n        if rows[0].user_ref == auth.user_id:\n            return True\n        else:\n            return False\n    else:\n        return True ## TRIVIALLY TRUE BECAUSE REVIEW DOES NOT EXIST\n\ndef updateReviewType(revId, type_):\n    rows = selectReview(revId)\n    if rows and type_ in [\'product\', \'sub_edition\', \'edition\', \'reply\']:\n        db(db.review.id == revId).update(for_type = type_)\n\ndef updateReviewProductRef(revId, prodId):\n    rows = selectReview(revId)\n    if rows:\n        db(db.review.id == revId).update(product_ref=prodId)\n\ndef updateReviewEditionRef(revId, edId):\n    rows = selectReview(revId)\n    if rows:\n        db(db.review.id == revId).update(edition_ref=edId)\n\ndef updateReviewSubEditionRef(revId, subEdId):\n    rows = selectReview(revId)\n    if rows:\n        db(db.review.id == revId).update(sub_edition_ref=subEdId)\n\ndef updateReviewReplyRef(revId, repId):\n    rows = selectReview(revId)\n    if rows:\n        db(db.review.id == revId).update(review_ref=repId)\n\ndef deleteReview(revId):\n    rows = selectReview(revId)\n    if rows:\n        db(db.review.id == revId).delete()\n\ndef updateReviewTypeNTypeId(revId, type_, typeId):\n    rows = selectReview(revId)\n    if rows:\n        updateReviewType(revId, type_)\n        if(type_ == \'product\'):\n            updateReviewProductRef(revId, typeId)\n        elif(type_ == \'edition\'):\n            updateReviewEditionRef(revId, typeId)\n        elif(type_ == \'sub_edition\'):\n            updateReviewSubEditionRef(revId, typeId)\n        elif(type_ == \'reply\'):\n            updateReviewReplyRef(revId, typeId)\n\ndef getReviewUserId(revId):\n    rows = selectReview(revId)\n    if rows:\n        return rows[0].user_ref\n    else:\n        return auth.user_id\n\ndef getReviewUserFirstNameAsTR(userId):\n    return TR(TD(LABEL(\'By Firstname: \'), _class="w2p_fl"), TD(INPUT(value=str(getAuthUserFirstName(userId)), _type=\'string\', _readonly=\'readonly\'), _class="w2p_fw"))\n\ndef getReviewUserUserNameAsTR(userId):\n    return TR(TD(LABEL(\'By Username: \'), _class="w2p_fl"), TD(INPUT(value=str(getAuthUserUserName(userId)), _type=\'string\', _readonly=\'readonly\'), _class="w2p_fw"))\n\ndef getEditableReviewForm(revId, type_, typeId):\n    update = db.review(revId)\n    submitBtnStr = \'Apply Changes\'\n    if not update:\n        if type_ in [\'product\', \'sub_edition\', \'edition\', \'reply\']:\n            db.review.for_type.default = type_\n        else:\n            return -1\n        if(type_ == \'product\'):\n            db.review.product_ref.default = typeId\n        elif(type_ == \'edition\'):\n            db.review.edition_ref.default = typeId\n        elif(type_ == \'sub_edition\'):\n            db.review.sub_edition_ref.default = typeId\n        elif(type_ == \'reply\'):\n            db.review.reply_ref.default = typeId\n        submitBtnStr = \'Submit\'\n\n    userId = getReviewUserId(revId)\n\n    form = SQLFORM(db.review, update, submit_button=submitBtnStr, showid=False, deletable=True, upload=URL(r=request,f=\'download\'))\n    \n    userName = getReviewUserFirstNameAsTR(userId)\n    form[0].insert(-1,userName)\n\n    userName = getReviewUserUserNameAsTR(userId)\n    form[0].insert(-1,userName)\n\n\n    if form.accepts(request, session):\n        response.flash = \'Submitted!\'\n    return form\n\ndef getNonEditableReviewForm(revId):\n    update = db.review(revId)\n    form = SQLFORM(db.review, update, buttons=[], showid=False, readonly=True, upload=URL(r=request,f=\'download\'))\n\n    userId = getReviewUserId(revId)\n    userName = getReviewUserFirstNameAsTR(userId)\n    form[0].insert(-1,userName)\n\n    userName = getReviewUserUserNameAsTR(userId)\n    form[0].insert(-1,userName)\n\n    return form\n\ndef getButtonToAddReview(type_, typeId):\n    addForm = getEditableReviewForm(-1, type_, typeId)\n    form = SQLFORM.factory(submit_button=\'Write review!\')\n    if form.accepts(request, session):\n        return addForm\n    return form\n\ndef getButtonToEditReview(revId, type_, typeId):\n    editForm = getEditableReviewForm(revId, type_, typeId)\n    form = SQLFORM.factory(submit_button=\'Edit review!\')\n    if form.accepts(request, session):\n        return editForm\n    return form\n\ndef getButtonToDeleteReview(revId):\n    form = SQLFORM.factory(submit_button=\'Edit review!\')\n    if form.accepts(request, session):\n        deleteReview(revId)\n    return form\n\ndef getTypeNTypeIdBasedReviews(type_, typeId):\n    if(type_ == \'product\'):\n        return db(db.review.for_type == \'product\' and db.review.product_ref == typeId).select()\n    elif(type_ == \'edition\'):\n        return db(db.review.for_type == \'edition\' and db.review.edition_ref == typeId).select()\n    elif(type_ == \'sub_edition\'):\n        return db(db.review.for_type == \'sub_edition\' and db.review.sub_edition_ref == typeId).select()\n    elif(type_ == \'reply\'):\n        return db(db.review.for_type == \'reply\' and db.review.reply_ref == typeId).select()\n\ndef getAllReviewForms(type_, typeId):\n    rows = getTypeNTypeIdBasedReviews(type_, typeId)\n    formList = []\n    for row in rows:\n        if isReviewWrittenByThisUser(row.id):\n            formList.append(getEditableReviewForm(row.id, type_, typeId))\n        else:\n            formList.append(getNonEditableReviewForm(row.id))\n    return formList\n\ndef getAuthBasedButtonToAddReview(type_, typeId):\n    if not session.auth or auth.user.user_type == \'b\':\n        return SQLFORM.factory(buttons=[])\n    else:\n        return getButtonToAddReview(type_, typeId)\n\ndef getAuthBasedReviewForm(type_, typeId):\n    form = getAuthBasedButtonToAddReview(type_, typeId)\n    allForms = getAllReviewForms(type_, typeId)\n    allForms.append(form)\n    return allForms\n\n\'\'\'\nReview Functions\nEnd\n\'\'\'\nresponse._vars=response._caller(product_index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/dhruv/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 1254, in <module>\n  File "/home/dhruv/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 50, in product_index\n    return getProductPage(getProductIdOf(urllib2.unquote(request.args(0))))\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 55, in getProductPage\n    return dict(product_info=getAuthBasedProductProfile(prodId), edition_info=getAuthBasedAllEditonForm(prodId), form=getAuthBasedReviewForm(\'product\', prodId))\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 662, in getAuthBasedAllEditonForm\n    allForms = getAllEditonForms(prodId)\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 651, in getAllEditonForms\n    formList.append(getNonEditableEditionForm(row.id, prodId))\n  File "/home/dhruv/web2py/applications/critico/controllers/default.py", line 629, in getNonEditableEditionForm\n    form = SQLFORM.factory(db.edition, update, submit_button=\'Submit Rating\', showid=False, readonly=True, upload=URL(r=request,f=\'download\'))\n  File "/home/dhruv/web2py/gluon/sqlhtml.py", line 1735, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/dhruv/web2py/gluon/dal/base.py", line 787, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/dhruv/web2py/gluon/dal/base.py", line 804, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/dhruv/web2py/gluon/dal/objects.py", line 327, in __init__\n    \'define_table argument is not a Field or Table: %s\' % field)\nSyntaxError: define_table argument is not a Field or Table: <Row {\'number_\': 1L, \'product_ref\': 4L, \'name\': \'Edition Name\', \'display_picture_name\': \'\', \'users_rated\': None, \'display_picture_blob\': None, \'date_of_release\': datetime.date(2015, 4, 4), \'users_rating\': None, \'id\': 16L, \'description\': \'Description of Edition\'}>\n'
p11
s.